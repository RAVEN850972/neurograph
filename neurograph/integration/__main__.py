"""
–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–æ–¥—É–ª—è Integration –∫–∞–∫ standalone –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
"""

import sys
import argparse
from pathlib import Path

from neurograph.integration import (
    create_default_engine,
    create_lightweight_engine,
    create_research_engine,
    ProcessingRequest,
    ComponentMonitor
)
from neurograph.integration.examples.basic_usage import main as run_basic_examples
from neurograph.integration.examples.advanced_integration import main as run_advanced_examples
from neurograph.integration.examples.performance_testing import main as run_performance_tests


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
    parser = argparse.ArgumentParser(
        description="NeuroGraph Integration Module CLI",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python -m neurograph.integration --demo basic
  python -m neurograph.integration --interactive
  python -m neurograph.integration --test performance
  python -m neurograph.integration --process "–í–∞—à —Ç–µ–∫—Å—Ç –∑–¥–µ—Å—å"
        """
    )
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    parser.add_argument(
        "--demo", 
        choices=["basic", "advanced", "all"],
        help="–ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤"
    )
    
    parser.add_argument(
        "--test",
        choices=["unit", "integration", "performance", "all"],
        help="–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤"
    )
    
    parser.add_argument(
        "--interactive", 
        action="store_true",
        help="–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º"
    )
    
    parser.add_argument(
        "--process",
        type=str,
        help="–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    parser.add_argument(
        "--config",
        choices=["default", "lightweight", "research"],
        default="default",
        help="–¢–∏–ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–≤–∏–∂–∫–∞"
    )
    
    parser.add_argument(
        "--monitor",
        action="store_true",
        help="–í–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
    )
    
    parser.add_argument(
        "--verbose", "-v",
        action="store_true",
        help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥"
    )
    
    args = parser.parse_args()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    if args.demo:
        run_demo(args.demo)
    elif args.test:
        run_tests(args.test)
    elif args.interactive:
        run_interactive_mode(args.config, args.monitor, args.verbose)
    elif args.process:
        process_text(args.process, args.config, args.verbose)
    else:
        parser.print_help()


def run_demo(demo_type: str):
    """–ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤."""
    print(f"üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {demo_type}")
    
    try:
        if demo_type == "basic":
            run_basic_examples()
        elif demo_type == "advanced":
            run_advanced_examples()
        elif demo_type == "all":
            print("üìã –ë–∞–∑–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã:")
            run_basic_examples()
            print("\nüìã –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –ø—Ä–∏–º–µ—Ä—ã:")
            run_advanced_examples()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        return False
    
    return True


def run_tests(test_type: str):
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤."""
    print(f"üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤: {test_type}")
    
    try:
        if test_type == "unit":
            from tests.integration.test_integration_module import run_integration_tests
            return run_integration_tests()
        elif test_type == "performance":
            run_performance_tests()
        elif test_type == "all":
            print("üß™ Unit —Ç–µ—Å—Ç—ã:")
            from tests.integration.test_integration_module import run_integration_tests
            unit_success = run_integration_tests()
            
            print("\nüöÄ –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
            run_performance_tests()
            
            return unit_success
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç–µ—Å—Ç–æ–≤: {test_type}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        return False


def create_engine(config_type: str):
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–≤–∏–∂–∫–∞ –ø–æ —Ç–∏–ø—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    if config_type == "lightweight":
        return create_lightweight_engine()
    elif config_type == "research":
        return create_research_engine()
    else:
        return create_default_engine()


def process_text(text: str, config_type: str, verbose: bool):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞."""
    print(f"üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ (–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config_type})")
    if verbose:
        print(f"–¢–µ–∫—Å—Ç: {text}")
    
    engine = create_engine(config_type)
    
    try:
        start_time = time.time()
        response = engine.process_text(text)
        processing_time = time.time() - start_time
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(f"‚úÖ –£—Å–ø–µ—Ö: {response.success}")
        print(f"‚è±Ô∏è –í—Ä–µ–º—è: {processing_time:.3f}—Å")
        print(f"üîß –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {', '.join(response.components_used)}")
        print(f"üí¨ –û—Ç–≤–µ—Ç: {response.primary_response}")
        
        if verbose and response.structured_data:
            print(f"\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
            for key, data in response.structured_data.items():
                if isinstance(data, dict):
                    print(f"  {key}: {len(data)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                else:
                    print(f"  {key}: {type(data).__name__}")
        
        if response.explanation:
            print(f"\nüìù –û–±—ä—è—Å–Ω–µ–Ω–∏–µ:")
            for explanation in response.explanation:
                print(f"  - {explanation}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
    finally:
        engine.shutdown()


def run_interactive_mode(config_type: str, enable_monitor: bool, verbose: bool):
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã."""
    print(f"ü§ñ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º NeuroGraph (–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config_type})")
    print("–í–≤–µ–¥–∏—Ç–µ 'help' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏, 'quit' –¥–ª—è –≤—ã—Ö–æ–¥–∞")
    
    engine = create_engine(config_type)
    monitor = None
    
    if enable_monitor:
        monitor = ComponentMonitor()
        monitor.start_monitoring(engine.provider)
        print("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω")
    
    try:
        while True:
            try:
                user_input = input("\nü§ñ > ").strip()
                
                if not user_input:
                    continue
                
                if user_input.lower() in ['quit', 'exit', 'q']:
                    print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    break
                
                if user_input.lower() == 'help':
                    print_help()
                    continue
                
                if user_input.lower() == 'status':
                    print_system_status(engine, monitor, verbose)
                    continue
                
                if user_input.lower().startswith('learn:'):
                    text = user_input[6:].strip()
                    if text:
                        process_learning(engine, text, verbose)
                    else:
                        print("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è: learn: <—Ç–µ–∫—Å—Ç>")
                    continue
                
                if user_input.lower().startswith('query:'):
                    text = user_input[6:].strip()
                    if text:
                        process_query(engine, text, verbose)
                    else:
                        print("‚ùå –£–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å: query: <–∑–∞–ø—Ä–æ—Å>")
                    continue
                
                # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
                process_interactive_input(engine, user_input, verbose)
                
            except KeyboardInterrupt:
                print("\n\nüëã –í—ã—Ö–æ–¥ –ø–æ Ctrl+C")
                break
            except EOFError:
                print("\n\nüëã –í—ã—Ö–æ–¥ –ø–æ EOF")
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                if verbose:
                    import traceback
                    traceback.print_exc()
    
    finally:
        if monitor:
            monitor.stop_monitoring()
        engine.shutdown()


def print_help():
    """–í—ã–≤–æ–¥ —Å–ø—Ä–∞–≤–∫–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞."""
    help_text = """
üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
  <—Ç–µ–∫—Å—Ç>           - –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
  learn: <—Ç–µ–∫—Å—Ç>    - –ò–∑—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏  
  query: <–∑–∞–ø—Ä–æ—Å>   - –ó–∞–ø—Ä–æ—Å –∫ —Å–∏—Å—Ç–µ–º–µ –∑–Ω–∞–Ω–∏–π
  
–°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
  status            - –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
  help              - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
  quit/exit/q       - –í—ã—Ö–æ–¥

–ü—Ä–∏–º–µ—Ä—ã:
  Python - —ç—Ç–æ —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
  learn: Django - –≤–µ–±-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è Python
  query: –ß—Ç–æ —Ç–∞–∫–æ–µ Python?
  status
    """
    print(help_text)


def print_system_status(engine, monitor, verbose):
    """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã."""
    print("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:")
    
    # –ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã
    health = engine.get_health_status()
    status_emoji = {
        "healthy": "‚úÖ",
        "degraded": "üü°", 
        "critical": "‚ùå"
    }.get(health.get("overall_status", "unknown"), "‚ùì")
    
    print(f"  {status_emoji} –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {health.get('overall_status', 'unknown')}")
    print(f"  üîß –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {len(health.get('components', {}))}")
    
    # –ú–µ—Ç—Ä–∏–∫–∏
    metrics = health.get("metrics", {})
    if metrics:
        print(f"  üìà –ó–∞–ø—Ä–æ—Å–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {metrics.get('requests_processed', 0)}")
        print(f"  ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {metrics.get('successful_requests', 0)}")
        print(f"  ‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {metrics.get('failed_requests', 0)}")
        
        avg_time = metrics.get('average_processing_time', 0)
        if avg_time > 0:
            print(f"  ‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.3f}—Å")
    
    # –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
    if verbose:
        print(f"\nüîß –î–µ—Ç–∞–ª–∏ –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º:")
        for comp_name, comp_status in health.get("components", {}).items():
            status = comp_status.get("status", "unknown")
            emoji = {"healthy": "‚úÖ", "degraded": "üü°", "unhealthy": "‚ùå"}.get(status, "‚ùì")
            print(f"    {emoji} {comp_name}: {status}")
    
    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    if monitor:
        monitor_report = monitor.get_monitoring_report()
        print(f"  üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω: {monitor_report['monitoring_active']}")
        
        alerts = monitor_report.get('recent_alerts', [])
        if alerts:
            print(f"  ‚ö†Ô∏è –ü–æ—Å–ª–µ–¥–Ω–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤: {len(alerts)}")


def process_learning(engine, text, verbose):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∏–∑—É—á–µ–Ω–∏—è."""
    print(f"üìö –ò–∑—É—á–∞—é: {text}")
    
    try:
        response = engine.learn(text)
        
        if response.success:
            print(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑—É—á–µ–Ω–∞!")
            if verbose:
                learning_data = response.structured_data.get("learning", {})
                if learning_data:
                    print(f"üìã –î–µ—Ç–∞–ª–∏: {learning_data}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑—É—á–µ–Ω–∏—è: {response.error_message}")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


def process_query(engine, query, verbose):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –∑–Ω–∞–Ω–∏—è–º."""
    print(f"‚ùì –ó–∞–ø—Ä–æ—Å: {query}")
    
    try:
        response = engine.query(query)
        
        if response.success:
            print(f"üí° –û—Ç–≤–µ—Ç: {response.primary_response}")
            
            if verbose and response.structured_data:
                graph_search = response.structured_data.get("graph_search", {})
                if graph_search:
                    found = len(graph_search.get("found_nodes", []))
                    related = len(graph_search.get("related_concepts", []))
                    print(f"üìä –ù–∞–π–¥–µ–Ω–æ –≤ –≥—Ä–∞—Ñ–µ: {found} —É–∑–ª–æ–≤, {related} —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ç–æ–≤")
                
                memory_search = response.structured_data.get("memory_search", {})
                if memory_search:
                    memories = len(memory_search.get("relevant_memories", []))
                    print(f"üß† –ù–∞–π–¥–µ–Ω–æ –≤ –ø–∞–º—è—Ç–∏: {memories} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {response.error_message}")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


def process_interactive_input(engine, text, verbose):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞."""
    try:
        start_time = time.time()
        response = engine.process_text(text)
        processing_time = time.time() - start_time
        
        if response.success:
            print(f"üí¨ {response.primary_response}")
            
            if verbose:
                print(f"‚è±Ô∏è –í—Ä–µ–º—è: {processing_time:.3f}—Å")
                print(f"üîß –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {', '.join(response.components_used)}")
                
                if response.structured_data:
                    nlp_data = response.structured_data.get("nlp", {})
                    if nlp_data:
                        entities = len(nlp_data.get("entities", []))
                        relations = len(nlp_data.get("relations", []))
                        print(f"üìã NLP: {entities} —Å—É—â–Ω–æ—Å—Ç–µ–π, {relations} –æ—Ç–Ω–æ—à–µ–Ω–∏–π")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.error_message}")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")


if __name__ == "__main__":
    import time
    main()