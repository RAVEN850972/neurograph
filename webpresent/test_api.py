#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API NeuroGraph –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
"""

import inspect
from typing import Any, Dict, List

def test_neurograph_api():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API NeuroGraph."""
    
    try:
        from neurograph.integration import create_default_engine
        print("‚úÖ NeuroGraph —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ NeuroGraph: {e}")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫
        engine = create_default_engine()
        print("‚úÖ –î–≤–∏–∂–æ–∫ NeuroGraph —Å–æ–∑–¥–∞–Ω")
        
        # –ò—Å—Å–ª–µ–¥—É–µ–º –¥–≤–∏–∂–æ–∫
        print("\n" + "="*50)
        print("–ú–ï–¢–û–î–´ –î–í–ò–ñ–ö–ê:")
        print("="*50)
        
        engine_methods = [method for method in dir(engine) if not method.startswith('_')]
        for method in engine_methods:
            try:
                attr = getattr(engine, method)
                if callable(attr):
                    sig = inspect.signature(attr)
                    print(f"  ‚úì {method}{sig}")
                else:
                    print(f"  ‚Ä¢ {method}: {type(attr).__name__}")
            except Exception as e:
                print(f"  ‚ö† {method}: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞—Ç—É—Ä—ã - {e}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        print("\n" + "="*50)
        print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ú–ü–û–ù–ï–ù–¢–û–í:")
        print("="*50)
        
        try:
            memory = engine.provider.get_component('memory')
            print("\nüìä MEMORY –ö–û–ú–ü–û–ù–ï–ù–¢:")
            print("-" * 30)
            
            memory_methods = [method for method in dir(memory) if not method.startswith('_')]
            for method in memory_methods:
                try:
                    attr = getattr(memory, method)
                    if callable(attr):
                        sig = inspect.signature(attr)
                        print(f"  ‚úì {method}{sig}")
                    else:
                        print(f"  ‚Ä¢ {method}: {type(attr).__name__}")
                except Exception as e:
                    print(f"  ‚ö† {method}: –æ—à–∏–±–∫–∞ - {e}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã –ø–∞–º—è—Ç–∏
            print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ï–¢–û–î–û–í –ü–ê–ú–Ø–¢–ò:")
            print("-" * 35)
            
            # –¢–µ—Å—Ç get_memory_statistics
            try:
                stats = memory.get_memory_statistics()
                print(f"  ‚úÖ get_memory_statistics(): —Ä–∞–±–æ—Ç–∞–µ—Ç")
                print(f"     –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {list(stats.keys())}")
            except Exception as e:
                print(f"  ‚ùå get_memory_statistics(): {e}")
            
            # –¢–µ—Å—Ç get_recent_items
            try:
                recent = memory.get_recent_items()
                print(f"  ‚úÖ get_recent_items(): —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ª—É—á–µ–Ω–æ {len(recent) if recent else 0} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                if recent:
                    print(f"     –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç: {type(recent[0])}")
                    print(f"     –ê—Ç—Ä–∏–±—É—Ç—ã: {dir(recent[0])}")
            except Exception as e:
                print(f"  ‚ùå get_recent_items(): {e}")
            
            # –¢–µ—Å—Ç get_most_accessed_items
            try:
                accessed = memory.get_most_accessed_items()
                print(f"  ‚úÖ get_most_accessed_items(): —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ª—É—á–µ–Ω–æ {len(accessed) if accessed else 0} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            except Exception as e:
                print(f"  ‚ùå get_most_accessed_items(): {e}")
            
            # –¢–µ—Å—Ç search
            try:
                # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–∏–º —á—Ç–æ-—Ç–æ –≤ –ø–∞–º—è—Ç—å —á–µ—Ä–µ–∑ –æ–±—É—á–µ–Ω–∏–µ
                print("\n  üìù –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
                engine.learn("–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –ø–∞–º—è—Ç–∏")
                
                search_result = memory.search("—Ç–µ—Å—Ç–æ–≤—ã–µ", limit=5)
                print(f"  ‚úÖ search('—Ç–µ—Å—Ç–æ–≤—ã–µ', limit=5): —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–∞–π–¥–µ–Ω–æ {len(search_result) if search_result else 0} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            except Exception as e:
                try:
                    # –ü—Ä–æ–±—É–µ–º –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ limit
                    search_result = memory.search("—Ç–µ—Å—Ç–æ–≤—ã–µ")
                    print(f"  ‚úÖ search('—Ç–µ—Å—Ç–æ–≤—ã–µ'): —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–∞–π–¥–µ–Ω–æ {len(search_result) if search_result else 0} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                except Exception as e2:
                    print(f"  ‚ùå search(): {e2}")
            
            # –ò—Å—Å–ª–µ–¥—É–µ–º STM –∏ LTM
            print("\nüîç –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï STM/LTM:")
            print("-" * 25)
            
            if hasattr(memory, 'stm'):
                print(f"  ‚úì STM –¥–æ—Å—Ç—É–ø–µ–Ω: {type(memory.stm)}")
                stm_methods = [m for m in dir(memory.stm) if not m.startswith('_')]
                print(f"    –ú–µ—Ç–æ–¥—ã STM: {stm_methods[:5]}...")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            
            if hasattr(memory, 'ltm'):
                print(f"  ‚úì LTM –¥–æ—Å—Ç—É–ø–µ–Ω: {type(memory.ltm)}")
                ltm_methods = [m for m in dir(memory.ltm) if not m.startswith('_')]
                print(f"    –ú–µ—Ç–æ–¥—ã LTM: {ltm_methods[:5]}...")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å memory: {e}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥—Ä–∞—Ñ
        try:
            graph = engine.provider.get_component('semgraph')
            print("\nüï∏Ô∏è SEMGRAPH –ö–û–ú–ü–û–ù–ï–ù–¢:")
            print("-" * 30)
            
            graph_methods = [method for method in dir(graph) if not method.startswith('_')]
            print(f"  –ú–µ—Ç–æ–¥—ã: {graph_methods[:10]}...")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å semgraph: {e}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º NLP
        try:
            nlp = engine.provider.get_component('nlp')
            print("\nüî§ NLP –ö–û–ú–ü–û–ù–ï–ù–¢:")
            print("-" * 20)
            
            nlp_methods = [method for method in dir(nlp) if not method.startswith('_')]
            print(f"  –ú–µ—Ç–æ–¥—ã: {nlp_methods[:10]}...")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å nlp: {e}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–≤–∏–∂–∫–∞
        print("\n" + "="*50)
        print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–°–ù–û–í–ù–´–• –ú–ï–¢–û–î–û–í –î–í–ò–ñ–ö–ê:")
        print("="*50)
        
        # –¢–µ—Å—Ç learn
        try:
            learn_result = engine.learn("–¢–µ—Å—Ç–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ")
            print(f"  ‚úÖ learn(): —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"     –†–µ–∑—É–ª—å—Ç–∞—Ç: {type(learn_result)}")
            print(f"     Success: {getattr(learn_result, 'success', '–Ω–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–∞')}")
        except Exception as e:
            print(f"  ‚ùå learn(): {e}")
        
        # –¢–µ—Å—Ç query
        try:
            query_result = engine.query("–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
            print(f"  ‚úÖ query(): —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"     –†–µ–∑—É–ª—å—Ç–∞—Ç: {type(query_result)}")
            print(f"     Primary response: {getattr(query_result, 'primary_response', '–Ω–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–∞')}")
        except Exception as e:
            print(f"  ‚ùå query(): {e}")
        
        # –¢–µ—Å—Ç process_text
        try:
            process_result = engine.process_text("–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            print(f"  ‚úÖ process_text(): —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"     –†–µ–∑—É–ª—å—Ç–∞—Ç: {type(process_result)}")
        except Exception as e:
            print(f"  ‚ùå process_text(): {e}")
        
        print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏
        try:
            final_stats = memory.get_memory_statistics()
            print(f"\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏:")
            print(f"  STM: {final_stats['memory_levels']['stm']['size']} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            print(f"  LTM: {final_stats['memory_levels']['ltm']['size']} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            print(f"  –í—Å–µ–≥–æ: {final_stats.get('total_items', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        try:
            engine.shutdown()
            print("‚úÖ –î–≤–∏–∂–æ–∫ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")
    
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API NEUROGRAPH")
    print("=" * 60)
    test_neurograph_api()